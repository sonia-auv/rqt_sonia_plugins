/**
 * \file	focused_frame.h
 * \author	Thibaut Mattio <thibaut.mattio@gmail.com>
 * \date	15/03/2015
 * \copyright	2015 SONIA AUV ETS <sonia@ens.etsmtl.ca>
 */

#pragma once

// Others librairies and .h
#include <QFrame>
#include <QWidget>
#include <QMouseEvent>
#include <QLineEdit>
#include <QCheckBox>
#include <QPushButton>
#include <QFileDialog>

// Project's .h
#include "ui_focused_frame.h"
#include "image_frame.h"

/**
 * The namespace Ui is generated by Qt-Designer.
 * It will contain all the classes that manage GUI
 */
namespace Ui {
class MainWindow;
}

namespace gui_vision_client {

class FocusedFrameController : public QFrame {
  /**
   * The Q_OBJECT constant provided by Qt.
   * Allow the class to behave as a Widget (provides SLOTS, SIGNALS, etc.)
   */
  Q_OBJECT

 public:
  //==========================================================================
  // C O N S T R U C T O R S   A N D   D E S T R U C T O R

  /**
   * Constructor.
   *
   * \param [in,out]	parent Qt parent Widgets
   */
  explicit FocusedFrameController(QWidget *const parent = nullptr);

  /** Destructor */
  ~FocusedFrameController() {}

  /**
   * This slot handle the behavior of the frame when it's focused.
   * It will basically draw a black frame around the frame.
   */
  void focus();

  /**
   * This slot handle the behavior of the frame when the it is unfocused.
   * It will revert the actions took on the slot onFocused().
   */
  void unfocus();

  //==========================================================================
  // G E T T E R S   A N D   S E T T E R S

  /**
   * Gets the first QLineEdit in the childhood of the instance of the
   *FocusedFrameController.
   *
   * \return	null if it fails, else the QLineEdit.
   */
  inline QLineEdit *const &getResultLine() const;

  /**
   * Gets the first ImageFrame in the childhood of the instance of the
   *FocusedFrameController.
   *
   * \return	null if it fails, else the ImageFrame.
   */
  inline ImageFrame *const &getImageFrame() const;

  /**
   * Gets the first QCheckBox in the childhood of the instance of the
   *FocusedFrameController.
   *
   * \return	null if it fails, else the QCheckBox.
   */
  inline QToolButton *const &getRecordButton() const;

  /**
   * Gets the first QPushButton in the childhood of the instance of the
   * FocusedFrameController.
   *
   * \return	null if it fails, else the QPushButton.
   */
  inline QToolButton *const &getScreenshotButton() const;

  /**
   * Gets the combobox contained on the focused frame that contains the list
   * of all the execution.
   *
   * \return The Combobox contained by the FocusedFrame if it exists.
   *         nullptr if not.
   */
  inline QComboBox *const &getComboBox() const;

  /**
   * Return an icon given a string of a theme icon
   */
  inline QIcon getIconFromTheme(const QString &str_icon) const;

 public slots:
  //==========================================================================
  // P U B L I C   S L O T S

  /**
   * Mouse release event.
   *
   * \param [in,out]	event	If non-null, the event.
   */
  virtual void mouseReleaseEvent(QMouseEvent *event) override;

 private slots:
  //==========================================================================
  // P R I V A T E   S L O T S

  /**
   * Handles the check box clicked described by checked.
   *
   * \param	checked	true if checked.
   */
  void onRecordButtonClicked();

  /**
   * Handles the sreenshot button clicked.
   */
  void onSreenshotButtonClicked();

signals:
  //==========================================================================
  // P U B L I C   S I G N A L S

  /**
   * Clicked the given parameter 1.
   *
   * \param	frame	A pointer to the instance of the FocusedFrameController
   */
  void clicked(FocusedFrameController *const &frame);

  /**
   * Check box clicked.
   *
   * \param	frame	A pointer to the instance of the FocusedFrameController
   * \param	bool	  	The bool.
   */
  void recordButtonClicked(FocusedFrameController *const &frame);

  /**
   * Signal emited when the screenshot button is clicked
   *
   * \param	frame	A pointer to the instance of the FocusedFrameController
   */
  void screenshotButtonClicked(FocusedFrameController *const &frame);

 private:
  //==========================================================================
  // P R I V A T E   M E M B E R

  Ui::FocusedFrame _ui;
};

//==============================================================================
// I N L I N E   F U N C T I O N S   D E F I N I T I O N S

//------------------------------------------------------------------------------
//
inline QLineEdit *const &FocusedFrameController::getResultLine() const {
  return _ui.video_result_line;
}

//------------------------------------------------------------------------------
//
inline ImageFrame *const &FocusedFrameController::getImageFrame() const {
  return _ui.video_image_frame;
}

//------------------------------------------------------------------------------
//
inline QToolButton *const &FocusedFrameController::getRecordButton() const {
  return _ui.video_record_button;
}

//------------------------------------------------------------------------------
//
inline QToolButton *const &FocusedFrameController::getScreenshotButton() const {
  return _ui.video_screenshot_button;
}

//------------------------------------------------------------------------------
//
inline QComboBox *const &FocusedFrameController::getComboBox() const {
  return _ui.video_combobox;
}

//------------------------------------------------------------------------------
//
inline QIcon FocusedFrameController::getIconFromTheme(
    const QString &str_icon) const {
  auto icon = QIcon{};
  if (QIcon::hasThemeIcon(str_icon)) {
    icon = QIcon::fromTheme(str_icon);
  } else {
    icon.addFile(QString::fromUtf8(""), QSize(), QIcon::Normal, QIcon::Off);
  }
  return icon;
}

}  // namespace gui_vision_client
