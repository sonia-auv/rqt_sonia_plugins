/**
 * \file	manage_filter_chains_window_controller.h
 * \author	Thibaut Mattio <thibaut.mattio@gmail.com>
 * \date	10/03/2015
 * \copyright	2015 SONIA AUV ETS <sonia@ens.etsmtl.ca>
 */

#pragma once

#include <QString>
#include <QDialog>
#include <QInputDialog>
#include <ui_manage_filter_chains_window.h>
#include "gui_vision_client/ros/communication_line.h"

/**
 * The namespace Ui is generated by Qt-Designer.
 * It will contain all the classes that manage GUI
 */
namespace Ui {
class ManageFilterChainsWindow;
}

namespace gui_vision_client {

class ManageFilterChainsWindowController : public QDialog {
  /**
   * The Q_OBJECT constant provided by Qt.
   * Allow the class to behave as a Widget (provides SLOTS, SIGNALS, etc.)
   */
  Q_OBJECT

 public:
  //==========================================================================
  // C O N S T R U C T O R S   A N D   D E S T R U C T O R

  /**
   * Create an instance of CreateExecutionWindowController
   *
   * \param parent The parent Qt widget
   */
  explicit ManageFilterChainsWindowController(CommunicationLine &communication,
                                              QWidget *const parent = nullptr);

  /** Destructor */
  ~ManageFilterChainsWindowController();

  /** Return the currently selected filter chain */
  inline const QString &getCurrentFilterChain() const;

 public slots:
  //==========================================================================
  // P U B L I C   S L O T S

  /** Handles the add filter chain clicked. */
  void onAddFilterChainClicked();

  /** Handles the remove filter chain clicked. */
  void onRemoveFilterChainClicked();

  /** Handles the rename filter chain clicked. */
  void onRenameFilterChainClicked();

  /** Handles the save filter chain clicked. */
  void onCopyFilterChainClicked();

  /**
   * Handles the filter chain changed described by parameter1.
   *
   * \param	parameter1	The first parameter.
   */
  void onFilterChainChanged(const QString &new_filter_chain);

 private:
  //==========================================================================
  // P R I V A T E   M E T H O D S

  /**
   * Load the filterchains into the list of filterchains Widget.
   *
   * To initiate the list, this method will call the communication member in
   * order to have the most recent list of filterchains. It is recommanded
   * that you call this method every time you call a method that will modify
   * filterchains on the server.
   */
  inline void loadFilterChains();

  //==========================================================================
  // P R I V A T E   M E M B E R S

  /** The UI Composant of this controller */
  Ui::ManageFilterChainsWindow _ui;

  /** The current filter chain. */
  QString _current_filter_chain;

  /** The communication. */
  CommunicationLine &_communication;
};

//==============================================================================
// I N L I N E   F U N C T I O N S   D E F I N I T I O N S

//------------------------------------------------------------------------------
//
inline void ManageFilterChainsWindowController::loadFilterChains() {
  _ui.filterchain_list->clear();
  for (const auto &filter_chain : _communication.getFilterChainList()) {
    _ui.filterchain_list->addItem(filter_chain);
  }
}

//------------------------------------------------------------------------------
//
inline const QString &
ManageFilterChainsWindowController::getCurrentFilterChain() const {
  return _current_filter_chain;
}

}  // namespace gui_vision_client
