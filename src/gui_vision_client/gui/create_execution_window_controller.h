/**
 * \file	create_execution_window_controller.h
 * \author Thibaut Mattio <thibaut.mattio@gmail.com>
 * \date	10/03/2015
 * \copyright	2015 SONIA AUV ETS <sonia@ens.etsmtl.ca>
 */

#pragma once

#include <memory>
#include <QVector>
#include <QString>
#include <QFileDialog>
#include <QMessageBox>
#include <ui_create_execution_window.h>

/**
 * The namespace Ui is generated by Qt-Designer.
 * It will contain all the classes that manage GUI
 */
namespace Ui {
class CreateExecutionWindow;
}

namespace gui_vision_client {

/**
 * This class offers a GUI for adding a new execution.
 */
class CreateExecutionWindowController : public QDialog {
  /**
   * The Q_OBJECT constant provided by Qt.
   * Allow the class to behave as a Widget (provides SLOTS, SIGNALS, etc.)
   */
  Q_OBJECT

 public:
  //==========================================================================
  // C O N S T R U C T O R S   A N D   D E S T R U C T O R

  /**
   * Create an instance of CreateExecutionWindowController
   *
   * \param parent The parent Qt widget
   */
  explicit CreateExecutionWindowController(QWidget *const parent = nullptr);

  virtual ~CreateExecutionWindowController() = default;

  //==========================================================================
  // G E T T E R S   A N D   S E T T E R S

  /**
   * Get the execution from the last CreateExecutionWindow instance
   *
   * \return The execution from the last CreateExecutionWindow instance
   */
  inline QString getExecution() const;

  /**
   * Get the filter chain from the last CreateExecutionWindow instance
   *
   * \return The filter chain from the last CreateExecutionWindow instance
   */
  inline QString getFilterChain() const;

  /**
   * Get the media from the last CreateExecutionWindow instance
   *
   * \return The media from the last CreateExecutionWindow instance
   */
  inline QString getMedia() const;

  /**
   * Set the list of the available filter_chains
   *
   * This will set the list of all the items in the combobox widget.
   *
   * \param filter_chains A vector of string containing all the filter chains.
   * \param	filter_chains	The filter chains.
   */
  void setFilterChainList(const QVector<QString> &filter_chains);

  /**
   * Set the list of the available medias
   *
   * \param filter_chains A vector of string containing all the medias.
   * \param	medias	The medias.
   */
  void setMediaList(const QVector<QString> &medias);

 public slots:
  //==========================================================================
  // P U B L I C   S L O T S

  /**
   * Open the QDialog for selecting a file and fill the file QLineEdit
   */
  void onSelectFile();

  /** Toogle the Media Radio Button. */
  void onSelectMediaRadio();

  /** Toogle the File Radio Button. */
  void onSelectFileRadio();

  /**
   * Check if the value are correct
   *
   * If the values are in correct, display a QInformation, it they are, call
   * #accept() slot.
   */
  void onOKClicked();

 private:
  //==========================================================================
  // P R I V A T E   M E M B E R S

  /** The UI Composant of this controller. */
  std::shared_ptr<Ui::CreateExecutionWindow> _ui;

  /** The execution from the last CreateExecutionWindow instance. */
  QString _execution;

  /** The filter chain from the last CreateExecutionWindow instance. */
  QString _filter_chain;

  /** The media from the last CreateExecutionWindow instance. */
  QString _media;
};

//==============================================================================
// I N L I N E   F U N C T I O N S   D E F I N I T I O N S

//------------------------------------------------------------------------------
//
inline QString CreateExecutionWindowController::getExecution() const {
  return _execution;
}

//------------------------------------------------------------------------------
//
inline QString CreateExecutionWindowController::getFilterChain() const {
  return _filter_chain;
}

//------------------------------------------------------------------------------
//
inline QString CreateExecutionWindowController::getMedia() const {
  return _media;
}

}  // namespace gui_vision_client
